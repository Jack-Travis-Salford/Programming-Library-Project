#BlueJ class context
comment0.params=
comment0.target=Library()
comment0.text=\r\n\ Default\ Constructor\ for\ objects\ of\ class\ Library.\ \r\n
comment1.params=
comment1.target=void\ readItemAndUserData()
comment1.text=\r\n\ Reads\ text\ document\ and\ turns\ items\ in\ text\ into\ LibraryItems\r\n
comment10.params=
comment10.target=void\ writeItemReservationDataUserSelectedFile()
comment10.text=\r\n\ Gets\ all\ item\ Reservations\ for\ hashMap\ and\ writes\ them\ to\ user\ selected\ text\ file\r\n
comment11.params=
comment11.target=void\ writeItemReservationData()
comment11.text=\r\n\ Gets\ all\ item\ Reservations\ for\ hashMap\ and\ writes\ them\ to\ default\ file\ (\\..\\Text\ files\\activeReservations.txt)\ starting\ from\ the\ active\ directory\r\n\ NOTE\:\ This\ operation\ overwrites\ any\ text\ already\ in\ said\ file\r\n
comment12.params=file
comment12.target=void\ itemReservationToFile(java.io.File)
comment12.text=\r\n\ Writes\ all\ item\ reservations\ to\ selected\ file\r\n\ Common\ code\ for\ writeItemReservationData()\ &\ writeItemReservationDataUserSelectedFile()\r\n
comment13.params=reservationNumber
comment13.target=void\ writeLastReservationNumber(java.lang.String)
comment13.text=\r\n\ Writes\ the\ last\ Resrvation\ Number\ to\ be\ assigned\ to\ a\ text\ file.\ Said\ text\ file\ is\ hard\ codeded.\ \r\n\ The\ file\ (from\ current\ working\ directory)\ is\ \\..\\Text\ file\\lastResrvationNo.txt\r\n\ 2\ Lines\ added\:\r\n\ 1.\ Identifier\ for\ lastReservationNo\ ([lastReservationNo])\r\n\ 2.\ The\ last\ reservation\ Number\r\n
comment14.params=pWriter
comment14.target=void\ addUserIdentifier(java.io.PrintWriter)
comment14.text=\r\n\ Adds\ 2\ lines\ to\ beginning\ of\ a\ file\ (said\ file\ is\ passed\ via\ PrintWriter),\ which\ will\ contain\ user\ information\:\r\n\ Line\ 1\:\ User\ identifier\ ([Library\ User\ Data])\r\n\ Line\ 2\:\ Key\ for\ anyone\ who\ reads\ said\ file\r\n
comment15.params=pWriter
comment15.target=void\ addReservationIdentifier(java.io.PrintWriter)
comment15.text=\r\n\ Adds\ 2\ lines\ to\ beginning\ of\ a\ file\ (said\ file\ is\ passed\ via\ PrintWriter),\ which\ will\ contain\ reservtion\ information\:\r\n\ Line\ 1\:\ resrvation\ identifier\ ([Item\ Reservation\ Data])\r\n\ Line\ 2\:\ Key\ for\ anyone\ who\ reads\ said\ file\r\n
comment16.params=
comment16.target=void\ printAllItemsAndUsers()
comment16.text=\r\n\ Displays\ all\ details\ of\ all\ items\ &\ users\ in\ itemMap\ &\ userMap\ respectively\r\n
comment17.params=
comment17.target=void\ printItemReservations()
comment17.text=\r\n\ Outputs\ all\ details\ of\ all\ item\ Reservations\ in\ itemReservationMap\r\n
comment18.params=startDate\ endDate
comment18.target=void\ printDiaryEntries(java.lang.String,\ java.lang.String)
comment18.text=\r\n\ Prints\ loaned\ items\ between\ the\ timeframe\ given\r\n
comment19.params=x
comment19.target=java.lang.String\ getKeySet(int)
comment19.text=\r\n\ Retrieves\ key\ Set\ from\ selected\ hashMap,\ based\ on\ inputted\ int\ value\r\n\ x\=0\ -\ Return\ Key\ Set\ of\ itemMap.\ \r\n\ x\=1\ -\ Return\ Key\ Set\ of\ userMap\r\n
comment2.params=chosenFile
comment2.target=void\ readTestData(java.lang.String)
comment2.text=\r\n\ Same\ as\ readItemAndUserData(),\ but\ from\ passed\ file\r\n\ Purpose\:\ For\ faster\ testing\ via\ the\ Test\ class.\ \r\n\ Difference\:\ Skips\ the\ need\ for\ a\ fileDialog\ by\ stating\ which\ file\ to\ read.\ If\ file\ isnt\ present,\ nothing\ happens.\r\n\ \r\n\ Test\ class\ allows\ for\ testing\ using\ both\ user\ selected\ &\ code\ defined\ files,\ to\ test\ the\ fileDialog\ and\ for\ ease\ of\ testing\ respectively.\r\n
comment20.params=key
comment20.target=ItemReservation\ getItemReservation(java.lang.String)
comment20.text=\r\n\ Retrieves\ itemReservation\ from\ hashMap,\ which\ has\ a\ matching\ key.\r\n
comment21.params=item
comment21.target=boolean\ storeItem(LibraryItem)
comment21.text=\r\n\ Stores\ item\ to\ itemMap\r\n
comment22.params=user
comment22.target=boolean\ storeUser(LibraryUser)
comment22.text=\r\n\ Stores\ user\ to\ users\r\n
comment23.params=reservation
comment23.target=boolean\ storeItemReservation(ItemReservation)
comment23.text=\r\n\ Store\ reservations\ in\ HashMap\r\n
comment24.params=
comment24.target=void\ addNewUsers()
comment24.text=\r\n\ Sorts\ 'new'\ users\ that\ were\ put\ in\ newUserList\ (assigns\ IDs,\ saves\ to\ userMap)\r\n\ A\ 'new'\ user\ is\ a\ user\ with\ id\ of\ "unknown"\r\n
comment25.params=userID\ itemCode\ startDate\ noOfDays
comment25.target=boolean\ makeItemReservation(java.lang.String,\ java.lang.String,\ java.lang.String,\ int)
comment25.text=\r\n\ Creates\ and\ stores\ a\ reservation\r\n
comment26.params=reservationNo
comment26.target=void\ deleteItemReservation(java.lang.String)
comment26.text=\r\n\ Deletes\ selected\ ItemReservation\r\n
comment27.params=prefix\ length
comment27.target=java.lang.String\ generateUserID(java.lang.String,\ int)
comment27.text=\r\n\ Produces\ an\ ID\ for\ a\ user.\r\n\ An\ ID\ is\ in\ the\ format\ [Prefix]-[Numbers]\r\n\ Where\ the\ prefix\ is\ the\ first\ letter\ of\ the\ Users\ firstname\ and\ surname\ (Eg.\ Joe\ Smith\ has\ the\ prefix\ JS)\r\n\ Where\ Numbers\ consists\ of\ 6\ randomly\ chosen\ numerical\ characters\r\n
comment28.params=user
comment28.target=void\ assignUserNewID(LibraryUser)
comment28.text=\r\n\ Reassigns\ User\ ID,\ in\ the\ case\ that\ users\ with\ same\ id\ has\ already\ been\ added,\ but\ their\ data\ differs.\r\n
comment29.params=
comment29.target=java.lang.String\ generateReservationNo()
comment29.text=\r\n\ Generates\ a\ reservation\ number\ by\ retreiving\ previous\ reservation\ number\ and\ incrementing\ it\ by\ 1.\r\n
comment3.params=
comment3.target=void\ readItemReservationData()
comment3.text=\r\n\ Reads\ text\ document\ and\ extracts\ item\ reservations\r\n
comment30.params=
comment30.target=int\ findLastReservationNumber()
comment30.text=\r\n\ Function\ that\ finds\ and\ returns\ lastReservationNo\ as\ int.\ e.g.,\ if\ lastReservationNo\ was\ 000009,\ 9\ would\ be\ returned\r\n\ \r\n\ Has\ 3\ main\ steps,\ with\ each\ subsequent\ step\ being\ executed\ on\ failure\ of\ pervious\ step.\ \r\n\ \r\n\ Step\ 1\:\ Read\ file\ that\ is\ expected\ to\ be\ present,\ which\ should\ contain\ lastReservationNo.\ If\ it\ isnt\ present,\ or\ file\ doesnt\ contain\r\n\ lastReservationNo,\ run\ Step\ 2\r\n\ \r\n\ Step\ 2\:\ Request\ user\ to\ select\ file\ where\ lastResrvationNo\ is\ found.\ If\ selected\ file\ doesnt\ contain\ lastReservatioNo,\ or\ no\ file\ was\r\n\ selected,\ run\ Step\ 3\r\n\ \r\n\ Step\ 3\:\ Worst\ Case\ Scenario\ reached\:\ Assumes\ no\ such\ file\ exists\ and\ that\ all\ present\ reservations\ have\ already\ been\ added.\ This\ looks\r\n\ through\ itemReservationMap\ for\ reservation\ with\ highest\ reservationNo\ and\ increments\ said\ value\ for\ next\ reservation.\ If\ no\ reservations\r\n\ are\ found\ in\ itemReservationMap,\ it\ is\ assumed\ that\ no\ reservations\ have\ yet\ been\ made\ and\ starts\ at\ "000001".\ NOTE\:\ If\ a\ reservation\ is\r\n\ later\ added\ with\ the\ same\ reservationNo\ as\ what\ has\ been\ assigned,\ that\ reservation\ will\ be\ required\ to\ receive\ a\ new\ reservationNo\ to\r\n\ prevent\ data\ loss.\ Such\ an\ issue\ cannot\ be\ solved\ without\ forcing\ all\ previous\ reservations\ to\ be\ added\ first.\r\n\ \r\n
comment31.params=file
comment31.target=int\ getLastReservationNumber(java.io.File)
comment31.text=\r\n\ Gets\ last\ reservation\ number\ from\ selected\ file\r\n
comment32.params=text
comment32.target=boolean\ checkLine(java.lang.String)
comment32.text=\r\n\ Checks\ selected\ String\ to\ see\ if\ it\ could\ be\ the\ reservationNo\ that\ is\ expected\r\n
comment33.params=
comment33.target=int\ findLastReservationNumberUserSelectedFile()
comment33.text=\r\n\ Primary\ use\:\ Step\ 2\ for\ findLastReservationNumber()\r\n\ Finds\ last\ reservation\ number\ by\ prompting\ user\ to\ select\ said\ file.\r\n
comment34.params=
comment34.target=int\ findLastResrvationNumberViaHashMap()
comment34.text=\r\n\ Primary\ use\:\ Step\ 3\ for\ findLastReservationNumber()\r\n\ Finds\ last\ reservation\ number\ by\ incrementing\ highest\ reservationNo\ in\ itemReservationMap\r\n\ NOTE\:\ This\ is\ the\ worst\ case\ scenario\ for\ finding\ lastResrvationNo,\ and\ should\ only\ be\ used\ if\ Step\ 1\ &\ 2\ (see\ findLastReservationNumber())\r\n\ fail\ to\ find\ lastReservationNo\r\n
comment35.params=file
comment35.target=void\ createExpectedFile(java.io.File)
comment35.text=\r\n\ Creates\ directories\ and\ files\ that\ were\ expected,\ but\ no\ present,\ so\ they're\ present\ for\ future\ use\r\n
comment36.params=user
comment36.target=boolean\ checkIfUserIDInUse(LibraryUser)
comment36.text=\r\nEnsures\ that\ user\ that\ is\ to\ be\ added\ to\ HashMap\ has\ a\ unique\ ID\ \r\n\r\n
comment37.params=item
comment37.target=boolean\ checkIfItemCodeInUse(LibraryItem)
comment37.text=\r\nEnsures\ that\ item\ that\ is\ to\ be\ added\ to\ HashMap\ has\ a\ unique\ ID\ \r\n\r\n
comment38.params=reservation
comment38.target=boolean\ checkIfItemReservationCodeInUse(ItemReservation)
comment38.text=\r\nEnsures\ that\ reservation\ that\ is\ to\ be\ added\ to\ HashMap\ has\ a\ unique\ ID\ \r\n\r\n
comment39.params=user
comment39.target=boolean\ checkUserSimilarities(LibraryUser)
comment39.text=\r\n\ Check\ if\ users\ with\ same\ ID\ are\ identical\r\n
comment4.params=
comment4.target=java.lang.String\ chooseFile()
comment4.text=\r\n\ Creates\ a\ file\ dialog.\ Returns\ chosen\ file\r\n
comment5.params=chosenFile
comment5.target=void\ getEachLineOfText(java.lang.String)
comment5.text=\r\n\ Uses\ scanner\ to\ get\ and\ display\ each\ useful\ line\ of\ text\ from\ selected\ text\ document\r\n
comment6.params=lineOfText\ typeOfData
comment6.target=void\ splitLineOfText(java.lang.String,\ int)
comment6.text=\r\n\ Passed\ a\ String,\ lineOfText,\ and\ an\ int,\ typeOfData\r\n\ Uses\ typeOfData\ to\ determine\ what\ lineOfText\ is\:\ e.g.\ A\ user,\ or\ an\ item\ (if\ item,\ it\ determines\ what\ type\ of\ item)\r\n\ \r\n
comment7.params=
comment7.target=void\ writeUserDataUserSelectedFile()
comment7.text=\r\n\ Writes\ every\ users\ data\ to\ a\ text\ file,\ of\ users\ choosing\r\n
comment8.params=
comment8.target=void\ writeUserData()
comment8.text=\r\n\ Writes\ data\ to\ default\ output\ text\ file,\ \\**\\Text\ files\\UsersWithIDs.txt,\ starting\ from\ the\ active\ directory\r\n\ Note\:\ This\ operation\ overwrites\ any\ text\ that\ is\ current\ in\ this\ file\r\n
comment9.params=file
comment9.target=void\ userDataToFile(java.io.File)
comment9.text=\r\n\ Common\ code\ for\ writeUserData()\ &\ writeUserDataUserSelectedFile()\r\n\ FileNotFoundException\ not\ caught\ because\ file\ is\ either\:\r\n\ 1.\ User\ selected\ file\ (which\ has\ been\ confirmed\ as\ chosen).\r\n\ 2.\ System\ selected\ file\ (via\ code)\ (which\ is\ created\ if\ not\ found)\r\n
numComments=40
